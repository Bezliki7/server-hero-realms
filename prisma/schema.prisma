generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ActionCondition {
  SACRIFICE          @map("sacrifice")
  FRACTION           @map("fraction")
  CHOICE             @map("choice")
  FOR_EVERY_DEFENDER @map("for_every_defender")
  FOR_EVERY_GURDIAN  @map("for_every_guardian")
  FOR_EVERY_FRACTION @map("for_every_fraction")

  @@map("action_condition")
}

enum HeroPlacement {
  ACTIVE_DECK      @map("active_deck")
  SELECTION_DECK   @map("selection_deck")
  RESET_DECK       @map("reset_deck")
  SACRIFICIAL_DECK @map("sacrificial_deck")
  TRADING_DECK     @map("trading_deck")
  TRADING_ROW      @map("trading_row")
  DEFENDERS_ROW    @map("defenders_row")

  @@map("hero_placement")
}

model Hero {
  id            Int            @id @default(autoincrement())
  playerId      Int?           @map("player_id")
  Player        Player?        @relation(fields: [playerId], references: [id])
  battlefieldId Int?           @map("battlefield_id")
  battlefield   Battlefield?   @relation(fields: [battlefieldId], references: [id])
  name          String         @db.VarChar(255)
  image         String         @db.VarChar(255)
  fraction      String         @db.VarChar(255)
  price         Int            @db.Integer()
  protection    Int?           @db.Integer()
  isGuardian    Boolean        @default(false) @map("is_guarfian") @db.Boolean()
  placement     HeroPlacement?
  actions       Action[]

  @@unique(fields: [id, name, playerId, battlefieldId], map: "hero_unique_keys", name: "uniqueKeys")
  @@map("hero")
}

model Action {
  id                       Int               @id @default(autoincrement())
  heroId                   Int               @map("hero_id")
  hero                     Hero              @relation(fields: [heroId], references: [id], onDelete: Cascade)
  conditions               ActionCondition[] @default([])
  isOptional               Boolean           @map("is_optional") @db.Boolean()
  isUsed                   Boolean           @default(false) @map("is_used") @db.Boolean()
  damage                   Int               @default(0) @db.Integer()
  heal                     Int               @default(0) @db.Integer()
  gold                     Int               @default(0) @db.Integer()
  takeCard                 Int               @default(0) @map("take_card") @db.Integer()
  sacrificeCard            Int               @default(0) @map("sacrifice_card") @db.Integer()
  resetCard                Int               @default(0) @map("reset_card") @db.Integer()
  resetOpponentsCard       Int               @default(0) @map("reset_opponents_card") @db.Integer()
  stanOpponentsHero        Int               @default(0) @map("stan_opponents_hero") @db.Integer()
  prepareHero              Int               @default(0) @map("prepare_hero") @db.Integer()
  putToDeckResetedCard     Int               @default(0) @map("put_to_deck_reseted_card") @db.Integer()
  putToDeckResetedDefender Int               @default(0) @map("put_to_deck_reseted_defender") @db.Integer()
  putPurchasedCardIntoDeck Int               @default(0) @map("put_purchased_card_into_deck") @db.Integer()

  @@map("action")
}

model Player {
  id                 Int          @id @default(autoincrement())
  battlefieldId      Int?         @map("battlefield_id")
  battlefield        Battlefield? @relation(fields: [battlefieldId], references: [id])
  name               String       @unique() @db.VarChar(255)
  image              String       @db.VarChar(255)
  health             Int          @db.Integer()
  currentTurnPlayer  Boolean      @default(false) @map("current_turn_player")
  turnOrder          Int          @map("turn_order") @db.Integer()
  currentGoldCount   Int          @default(0) @map("current_gold_count") @db.Integer()
  currentDamageCount Int          @default(0) @map("current_damage_count") @db.Integer()
  heroes             Hero[]

  @@map("player")
}

model Battlefield {
  id      Int      @id @default(autoincrement())
  name    String   @unique() @db.VarChar(255)
  round   Int      @default(1) @db.Integer()
  players Player[]
  heroes  Hero[]

  @@map("battlefield")
}
